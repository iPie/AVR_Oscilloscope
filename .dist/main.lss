
.dist/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001d4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000268  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  000009a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004af  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000023e  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001f7  00000000  00000000  000010f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000134  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001fe  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000247  00000000  00000000  0000161e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00001865  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  74:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADCInit>:
 *     ADCSRA |= 1 << ADSC;
 * }
 * @param channel ADC input pin (0..7) 
 */
void ADCInit(uint8_t channel) {
    ADMUX = (1 << REFS0) | (1 << REFS1) | channel; // AVCC with external capacitor at AREF pin
  7c:	80 6c       	ori	r24, 0xC0	; 192
  7e:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1 << ADEN)
  80:	8d ea       	ldi	r24, 0xAD	; 173
  82:	86 b9       	out	0x06, r24	; 6
            | (1 << ADIE)
            | (1 << ADATE)
            | (1 << ADPS0)
            | (0 << ADPS1)
            | (1 << ADPS2); // Division factor = 32
    MCUCR |= 1 << SM0;
  84:	85 b7       	in	r24, 0x35	; 53
  86:	80 61       	ori	r24, 0x10	; 16
  88:	85 bf       	out	0x35, r24	; 53
    MCUCR |= 1 << SE; // Sleep-mode enabled
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	85 bf       	out	0x35, r24	; 53
    ADCSRA |= (1 << ADSC);
  90:	36 9a       	sbi	0x06, 6	; 6
  92:	08 95       	ret

00000094 <disableADC>:
}

void disableADC() {
    ADCSRA = 0x00;
  94:	16 b8       	out	0x06, r1	; 6
  96:	08 95       	ret

00000098 <analogRead>:
}

uint16_t analogRead(uint8_t channel) {
    ADMUX |= channel;
  98:	97 b1       	in	r25, 0x07	; 7
  9a:	98 2b       	or	r25, r24
  9c:	97 b9       	out	0x07, r25	; 7
    ADCSRA |= (1 << ADSC);
  9e:	36 9a       	sbi	0x06, 6	; 6
    while (!(ADCSRA & (1 << ADIF))) {
  a0:	34 9b       	sbis	0x06, 4	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <analogRead+0x8>
        // Do nothing
    }
    ADCSRA |= (1 << ADIF); // Clear ADIF
  a4:	34 9a       	sbi	0x06, 4	; 6
    return (ADC);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	95 b1       	in	r25, 0x05	; 5
}
  aa:	08 95       	ret

000000ac <USARTInit>:
 *     value = UDR; // Read UDR register   
 * }
 * @param startService if set RXCIE will be enabled
 */
void USARTInit(char startService) {
    UBRRH &= ~(1 << URSEL);
  ac:	90 b5       	in	r25, 0x20	; 32
  ae:	9f 77       	andi	r25, 0x7F	; 127
  b0:	90 bd       	out	0x20, r25	; 32
    uint8_t baundPrescale = lround(((F_CPU / (USART_BAUDRATE * 16UL))) - 1);
    UBRRH = (unsigned char) (baundPrescale >> 8);
  b2:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) baundPrescale;
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	99 b9       	out	0x09, r25	; 9
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
  b8:	20 e8       	ldi	r18, 0x80	; 128
  ba:	82 9f       	mul	r24, r18
  bc:	c0 01       	movw	r24, r0
  be:	11 24       	eor	r1, r1
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0); // 1 stop bit, 8-bit data length
  c4:	8e e8       	ldi	r24, 0x8E	; 142
  c6:	80 bd       	out	0x20, r24	; 32
  c8:	08 95       	ret

000000ca <USARTSendByte>:
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <USARTSendByte>
        // Do nothing
    }
    UDR = data;
  ce:	8c b9       	out	0x0c, r24	; 12
  d0:	08 95       	ret

000000d2 <USARTReceiveByte>:
}

uint8_t USARTReceiveByte() {
    while ((UCSRA & (1 << RXC)) == 0) {
  d2:	5f 9b       	sbis	0x0b, 7	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <USARTReceiveByte>
        // Do nothing
    }
    return UDR;
  d6:	8c b1       	in	r24, 0x0c	; 12
}
  d8:	08 95       	ret

000000da <USARTSendString>:

/**
 * Send an array of characters over USART. '\n\r' is appended at the end.
 * @param str[] array of maximum 256 characters
 */
void USARTSendString(char str[]) {
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	ec 01       	movw	r28, r24
    uint8_t i = 0;
  e2:	10 e0       	ldi	r17, 0x00	; 0
    while (str[i] != '\0') {
  e4:	fe 01       	movw	r30, r28
  e6:	e1 0f       	add	r30, r17
  e8:	f1 1d       	adc	r31, r1
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <USARTSendString+0x1e>
        USARTSendByte(str[i]);
  f0:	0e 94 65 00 	call	0xca	; 0xca <USARTSendByte>
        i++;
  f4:	1f 5f       	subi	r17, 0xFF	; 255
  f6:	f6 cf       	rjmp	.-20     	; 0xe4 <USARTSendString+0xa>
    }
    USARTSendByte('\n');
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	0e 94 65 00 	call	0xca	; 0xca <USARTSendByte>
    USARTSendByte('\r');
  fe:	8d e0       	ldi	r24, 0x0D	; 13
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
    while (str[i] != '\0') {
        USARTSendByte(str[i]);
        i++;
    }
    USARTSendByte('\n');
    USARTSendByte('\r');
 106:	0c 94 65 00 	jmp	0xca	; 0xca <USARTSendByte>

0000010a <__vector_11>:
        USARTSendByte(l1);
        USARTSendByte(l2);
    }
}

ISR(USART_RXC_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
    usartValue = UDR;
 12c:	8c b1       	in	r24, 0x0c	; 12
 12e:	80 93 62 00 	sts	0x0062, r24
    switch (usartValue) {
 132:	80 91 62 00 	lds	r24, 0x0062
 136:	82 35       	cpi	r24, 0x52	; 82
 138:	29 f0       	breq	.+10     	; 0x144 <__vector_11+0x3a>
 13a:	83 35       	cpi	r24, 0x53	; 83
 13c:	41 f4       	brne	.+16     	; 0x14e <__vector_11+0x44>
    MCUCR |= 1 << SE; // Sleep-mode enabled
    ADCSRA |= (1 << ADSC);
}

void disableADC() {
    ADCSRA = 0x00;
 13e:	16 b8       	out	0x06, r1	; 6
            ADCInit(0);
            PORTB |= (1 << PINB0);
            break;
        case DEVICE_STOP_COMMAND:
            disableADC();
            PORTB &= ~(1 << PINB0);
 140:	c0 98       	cbi	0x18, 0	; 24
            break;
 142:	05 c0       	rjmp	.+10     	; 0x14e <__vector_11+0x44>
 144:	16 b8       	out	0x06, r1	; 6
ISR(USART_RXC_vect) {
    usartValue = UDR;
    switch (usartValue) {
        case DEVICE_START_COMMAND:
            disableADC();
            ADCInit(0);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 3e 00 	call	0x7c	; 0x7c <ADCInit>
            PORTB |= (1 << PINB0);
 14c:	c0 9a       	sbi	0x18, 0	; 24
        case DEVICE_STOP_COMMAND:
            disableADC();
            PORTB &= ~(1 << PINB0);
            break;
    }
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_14>:

ISR(ADC_vect) {
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
    adcBuffer = ADC;
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	95 b1       	in	r25, 0x05	; 5
 182:	90 93 61 00 	sts	0x0061, r25
 186:	80 93 60 00 	sts	0x0060, r24
    adcBufferValidFlag = 1;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 64 00 	sts	0x0064, r24
}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <main>:
volatile unsigned char transmissionEnabled;
volatile uint16_t adcBuffer;
volatile uint8_t adcBufferValidFlag;

int main(void) {
    DDRB |= (1 << PINB0);
 19e:	b8 9a       	sbi	0x17, 0	; 23
    sei();
 1a0:	78 94       	sei
    USARTInit(1);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 56 00 	call	0xac	; 0xac <USARTInit>
    uint16_t adcCache;
    while (1) {
        while (adcBufferValidFlag == 0) {
 1a8:	80 91 64 00 	lds	r24, 0x0064
 1ac:	88 23       	and	r24, r24
 1ae:	e1 f3       	breq	.-8      	; 0x1a8 <main+0xa>
            // Wait for ADC result
        }
        adcBufferValidFlag = 0;
 1b0:	10 92 64 00 	sts	0x0064, r1

        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 1b4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1b6:	f8 94       	cli
            adcCache = adcBuffer;
 1b8:	c0 91 60 00 	lds	r28, 0x0060
 1bc:	d0 91 61 00 	lds	r29, 0x0061
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1c0:	8f bf       	out	0x3f, r24	; 63
        }

        uint8_t l1 = adcCache;
        uint8_t l2 = adcCache >> 8;
        USARTSendByte(l1);
 1c2:	8c 2f       	mov	r24, r28
 1c4:	0e 94 65 00 	call	0xca	; 0xca <USARTSendByte>
        USARTSendByte(l2);
 1c8:	8d 2f       	mov	r24, r29
 1ca:	0e 94 65 00 	call	0xca	; 0xca <USARTSendByte>
    }
 1ce:	ec cf       	rjmp	.-40     	; 0x1a8 <main+0xa>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
