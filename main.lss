
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  000002da  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e8  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000043d  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000207  00000000  00000000  0000081f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003de  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e0  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d1  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001175  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  74:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z7ADCInitv>:
#define	ADC_H

#include <avr/io.h>

void ADCInit() {
    ADMUX = (1 << REFS0) | (0 << REFS1); // Internal 2.56V reference
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1 << ADEN) | (1 << ADPS2); // Division factor = 16
  80:	84 e8       	ldi	r24, 0x84	; 132
  82:	86 b9       	out	0x06, r24	; 6
}
  84:	08 95       	ret

00000086 <_Z7ADCInith>:
 * 
 * @param channel
 * ADC input pin (0..7)
 */
void ADCInit(uint8_t channel) {
    ADMUX = (1 << REFS0) | (1 << REFS1) | channel; // Internal 2.56V reference with additional cap
  86:	80 6c       	ori	r24, 0xC0	; 192
  88:	87 b9       	out	0x07, r24	; 7
            | (1 << ADSC)
            | (1 << ADIE)
            // Division factor = 128
            | (1 << ADPS0)
            | (1 << ADPS1)
            | (1 << ADPS2);
  8a:	8f ec       	ldi	r24, 0xCF	; 207
  8c:	86 b9       	out	0x06, r24	; 6
}
  8e:	08 95       	ret

00000090 <_Z10DisableADCv>:

void DisableADC() {
    ADCSRA = 0x00;
  90:	16 b8       	out	0x06, r1	; 6
}
  92:	08 95       	ret

00000094 <_Z10AnalogReadh>:

uint16_t AnalogRead(uint8_t channel) {
    ADMUX |= channel;
  94:	97 b1       	in	r25, 0x07	; 7
  96:	98 2b       	or	r25, r24
  98:	97 b9       	out	0x07, r25	; 7
    ADCSRA |= (1 << ADSC);
  9a:	36 9a       	sbi	0x06, 6	; 6
    while (!(ADCSRA & (1 << ADIF))) {
  9c:	34 9b       	sbis	0x06, 4	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <_Z10AnalogReadh+0x8>
        // Do nothing
    }
    ADCSRA |= (1 << ADIF); // Clear ADIF
  a0:	34 9a       	sbi	0x06, 4	; 6
    return (ADC);
  a2:	24 b1       	in	r18, 0x04	; 4
  a4:	35 b1       	in	r19, 0x05	; 5
}
  a6:	c9 01       	movw	r24, r18
  a8:	08 95       	ret

000000aa <_Z9USARTInitb>:
 * ISR(USART_RXC_vect) {
 *     value = UDR; // Read UDR register   
 * }
 */
void USARTInit(bool startService = false) {
    UBRRH = (unsigned char) (BAUD_PRESCALE >> 8);
  aa:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) BAUD_PRESCALE;
  ac:	98 e0       	ldi	r25, 0x08	; 8
  ae:	99 b9       	out	0x09, r25	; 9
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
  b0:	87 95       	ror	r24
  b2:	88 27       	eor	r24, r24
  b4:	87 95       	ror	r24
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	8a b9       	out	0x0a, r24	; 10
}
  ba:	08 95       	ret

000000bc <_Z13USARTSendBytec>:

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <_Z13USARTSendBytec>
        // Do nothing
    }
    UDR = data;
  c0:	8c b9       	out	0x0c, r24	; 12
}
  c2:	08 95       	ret

000000c4 <_Z16USARTReceiveBytev>:

uint8_t USARTReceiveByte() {
    while ((UCSRA & (1 << RXC)) == 0) {
  c4:	5f 9b       	sbis	0x0b, 7	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <_Z16USARTReceiveBytev>
        // Do nothing
    }
    return UDR;
  c8:	8c b1       	in	r24, 0x0c	; 12
}
  ca:	08 95       	ret

000000cc <_Z15USARTSendStringPc>:

void USARTSendString(char str[]) {
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <_Z15USARTSendStringPc+0xc>
    UBRRL = (unsigned char) BAUD_PRESCALE;
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <_Z15USARTSendStringPc+0x4>
        // Do nothing
    }
    UDR = data;
  d4:	ec b9       	out	0x0c, r30	; 12

void USARTSendString(char str[]) {
    uint8_t i = 0;
    while (str[i] != '\0') {
        USARTSendByte(str[i]);
        i++;
  d6:	2f 5f       	subi	r18, 0xFF	; 255
    return UDR;
}

void USARTSendString(char str[]) {
    uint8_t i = 0;
    while (str[i] != '\0') {
  d8:	fc 01       	movw	r30, r24
  da:	e2 0f       	add	r30, r18
  dc:	f1 1d       	adc	r31, r1
  de:	e0 81       	ld	r30, Z
  e0:	ee 23       	and	r30, r30
  e2:	b1 f7       	brne	.-20     	; 0xd0 <_Z15USARTSendStringPc+0x4>
    UBRRL = (unsigned char) BAUD_PRESCALE;
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <_Z15USARTSendStringPc+0x18>
        // Do nothing
    }
    UDR = data;
  e8:	8a e0       	ldi	r24, 0x0A	; 10
  ea:	8c b9       	out	0x0c, r24	; 12
    UBRRL = (unsigned char) BAUD_PRESCALE;
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <_Z15USARTSendStringPc+0x20>
        // Do nothing
    }
    UDR = data;
  f0:	8d e0       	ldi	r24, 0x0D	; 13
  f2:	8c b9       	out	0x0c, r24	; 12
        USARTSendByte(str[i]);
        i++;
    }
    USARTSendByte('\n');
    USARTSendByte('\r');
}
  f4:	08 95       	ret

000000f6 <main>:
volatile unsigned char usartValue;
volatile uint32_t adcSample;
volatile uint8_t samplesCount;

int main(void) {
    DDRB |= (1 << PINB0) | (1 << PINB1);
  f6:	87 b3       	in	r24, 0x17	; 23
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	87 bb       	out	0x17, r24	; 23
    PORTB |= (0 << PINB0) | (0 << PINB1);
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	88 bb       	out	0x18, r24	; 24
    sei();
 100:	78 94       	sei
 * ISR(USART_RXC_vect) {
 *     value = UDR; // Read UDR register   
 * }
 */
void USARTInit(bool startService = false) {
    UBRRH = (unsigned char) (BAUD_PRESCALE >> 8);
 102:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) BAUD_PRESCALE;
 104:	88 e0       	ldi	r24, 0x08	; 8
 106:	89 b9       	out	0x09, r24	; 9
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
 108:	88 e9       	ldi	r24, 0x98	; 152
 10a:	8a b9       	out	0x0a, r24	; 10
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
    USARTInit(true);
    // Indicate start-up sequence
    for (int i = 0; i < 3; i++) {
        PORTB ^= (1 << PINB0);
 110:	61 e0       	ldi	r22, 0x01	; 1
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 112:	40 e9       	ldi	r20, 0x90	; 144
 114:	51 e0       	ldi	r21, 0x01	; 1
 116:	88 b3       	in	r24, 0x18	; 24
 118:	86 27       	eor	r24, r22
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	84 ef       	ldi	r24, 0xF4	; 244
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	fa 01       	movw	r30, r20
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 126:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	d9 f7       	brne	.-10     	; 0x120 <main+0x2a>
        _delay_ms(50);
        PORTB ^= (1 << PINB0);
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	86 27       	eor	r24, r22
 12e:	88 bb       	out	0x18, r24	; 24
 130:	84 ef       	ldi	r24, 0xF4	; 244
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	fa 01       	movw	r30, r20
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	d9 f7       	brne	.-10     	; 0x134 <main+0x3e>
    DDRB |= (1 << PINB0) | (1 << PINB1);
    PORTB |= (0 << PINB0) | (0 << PINB1);
    sei();
    USARTInit(true);
    // Indicate start-up sequence
    for (int i = 0; i < 3; i++) {
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	23 30       	cpi	r18, 0x03	; 3
 144:	31 05       	cpc	r19, r1
 146:	39 f7       	brne	.-50     	; 0x116 <main+0x20>
 148:	ff cf       	rjmp	.-2      	; 0x148 <main+0x52>

0000014a <__vector_11>:
    while (1) {
        // Endless cycle of violence..
    }
}

ISR(USART_RXC_vect) {
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
    usartValue = UDR;
 158:	8c b1       	in	r24, 0x0c	; 12
 15a:	80 93 60 00 	sts	0x0060, r24
    switch (usartValue) {
 15e:	80 91 60 00 	lds	r24, 0x0060
 162:	82 35       	cpi	r24, 0x52	; 82
 164:	19 f0       	breq	.+6      	; 0x16c <__vector_11+0x22>
 166:	83 35       	cpi	r24, 0x53	; 83
 168:	99 f4       	brne	.+38     	; 0x190 <__vector_11+0x46>
 16a:	10 c0       	rjmp	.+32     	; 0x18c <__vector_11+0x42>
            | (1 << ADPS1)
            | (1 << ADPS2);
}

void DisableADC() {
    ADCSRA = 0x00;
 16c:	16 b8       	out	0x06, r1	; 6
        case 'R':
            DisableADC();
            samplesCount = 0;
 16e:	10 92 65 00 	sts	0x0065, r1
            adcSample = 0;
 172:	10 92 61 00 	sts	0x0061, r1
 176:	10 92 62 00 	sts	0x0062, r1
 17a:	10 92 63 00 	sts	0x0063, r1
 17e:	10 92 64 00 	sts	0x0064, r1
 * 
 * @param channel
 * ADC input pin (0..7)
 */
void ADCInit(uint8_t channel) {
    ADMUX = (1 << REFS0) | (1 << REFS1) | channel; // Internal 2.56V reference with additional cap
 182:	80 ec       	ldi	r24, 0xC0	; 192
 184:	87 b9       	out	0x07, r24	; 7
            | (1 << ADSC)
            | (1 << ADIE)
            // Division factor = 128
            | (1 << ADPS0)
            | (1 << ADPS1)
            | (1 << ADPS2);
 186:	8f ec       	ldi	r24, 0xCF	; 207
 188:	86 b9       	out	0x06, r24	; 6
 18a:	06 c0       	rjmp	.+12     	; 0x198 <__vector_11+0x4e>
}

void DisableADC() {
    ADCSRA = 0x00;
 18c:	16 b8       	out	0x06, r1	; 6
 18e:	04 c0       	rjmp	.+8      	; 0x198 <__vector_11+0x4e>
            break;
        case 'S':
            DisableADC();
            break;
        default:
            PORTB ^= (1 << PINB0);
 190:	88 b3       	in	r24, 0x18	; 24
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	89 27       	eor	r24, r25
 196:	88 bb       	out	0x18, r24	; 24
            break;
    }
}
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_14>:

ISR(ADC_vect) {
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
    if (samplesCount == 16) {
 1c0:	80 91 65 00 	lds	r24, 0x0065
 1c4:	80 31       	cpi	r24, 0x10	; 16
 1c6:	11 f5       	brne	.+68     	; 0x20c <__vector_14+0x66>
        int result = (int) (adcSample / 16);
 1c8:	80 91 61 00 	lds	r24, 0x0061
 1cc:	90 91 62 00 	lds	r25, 0x0062
 1d0:	a0 91 63 00 	lds	r26, 0x0063
 1d4:	b0 91 64 00 	lds	r27, 0x0064
 1d8:	34 e0       	ldi	r19, 0x04	; 4
 1da:	b6 95       	lsr	r27
 1dc:	a7 95       	ror	r26
 1de:	97 95       	ror	r25
 1e0:	87 95       	ror	r24
 1e2:	3a 95       	dec	r19
 1e4:	d1 f7       	brne	.-12     	; 0x1da <__vector_14+0x34>
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
 1e6:	5d 9b       	sbis	0x0b, 5	; 11
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <__vector_14+0x40>
        // Do nothing
    }
    UDR = data;
 1ea:	8c b9       	out	0x0c, r24	; 12
    UBRRL = (unsigned char) BAUD_PRESCALE;
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
 1ec:	5d 9b       	sbis	0x0b, 5	; 11
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <__vector_14+0x46>
        char adcLow = result;
        char adcHigh = (result >> 8);
 1f0:	89 2f       	mov	r24, r25
 1f2:	99 0f       	add	r25, r25
 1f4:	99 0b       	sbc	r25, r25
        // Do nothing
    }
    UDR = data;
 1f6:	8c b9       	out	0x0c, r24	; 12
        USARTSendByte(adcLow);
        USARTSendByte(adcHigh);
        adcSample = 0;
 1f8:	10 92 61 00 	sts	0x0061, r1
 1fc:	10 92 62 00 	sts	0x0062, r1
 200:	10 92 63 00 	sts	0x0063, r1
 204:	10 92 64 00 	sts	0x0064, r1
        samplesCount = 0;
 208:	10 92 65 00 	sts	0x0065, r1
    }
    adcSample += ADC;
 20c:	80 91 61 00 	lds	r24, 0x0061
 210:	90 91 62 00 	lds	r25, 0x0062
 214:	a0 91 63 00 	lds	r26, 0x0063
 218:	b0 91 64 00 	lds	r27, 0x0064
 21c:	24 b1       	in	r18, 0x04	; 4
 21e:	35 b1       	in	r19, 0x05	; 5
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	28 0f       	add	r18, r24
 226:	39 1f       	adc	r19, r25
 228:	4a 1f       	adc	r20, r26
 22a:	5b 1f       	adc	r21, r27
 22c:	20 93 61 00 	sts	0x0061, r18
 230:	30 93 62 00 	sts	0x0062, r19
 234:	40 93 63 00 	sts	0x0063, r20
 238:	50 93 64 00 	sts	0x0064, r21
    samplesCount++;
 23c:	80 91 65 00 	lds	r24, 0x0065
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	80 93 65 00 	sts	0x0065, r24
    //    char res [10];
    //    itoa(ADC, res, 10);
    //    USARTSendString(res);
    ADCSRA |= 1 << ADSC;
 246:	36 9a       	sbi	0x06, 6	; 6
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
