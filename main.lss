
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000280  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000f7  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003f1  00000000  00000000  00000397  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000202  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003ee  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f0  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d1  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00001109  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  74:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z7ADCInitv>:
#define	ADC_H

#include <avr/io.h>

void ADCInit() {
    ADMUX = (1 << REFS0) | (0 << REFS1); // Internal 2.56V reference
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1 << ADEN) | (1 << ADPS2); // Division factor = 16
  80:	84 e8       	ldi	r24, 0x84	; 132
  82:	86 b9       	out	0x06, r24	; 6
}
  84:	08 95       	ret

00000086 <_Z7ADCInith>:
 * 
 * @param channel
 * ADC input pin (0..7)
 */
void ADCInit(uint8_t channel) {
    ADMUX = (1 << REFS0) | channel; // AVCC with external capacitor at AREF pin
  86:	80 64       	ori	r24, 0x40	; 64
  88:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1 << ADEN)
            | (1 << ADIE)
            // Division factor = 128
            | (1 << ADPS0)
            | (1 << ADPS1)
            | (1 << ADPS2);
  8a:	8f e8       	ldi	r24, 0x8F	; 143
  8c:	86 b9       	out	0x06, r24	; 6
    MCUCR = 1 << SM0;
  8e:	80 e1       	ldi	r24, 0x10	; 16
  90:	85 bf       	out	0x35, r24	; 53
    MCUCR |= 1 << SE; // Sleep-mode enabled
  92:	85 b7       	in	r24, 0x35	; 53
  94:	80 64       	ori	r24, 0x40	; 64
  96:	85 bf       	out	0x35, r24	; 53
    ADCSRA |= (1 << ADSC);
  98:	36 9a       	sbi	0x06, 6	; 6
}
  9a:	08 95       	ret

0000009c <_Z10DisableADCv>:

void DisableADC() {
    ADCSRA = 0x00;
  9c:	16 b8       	out	0x06, r1	; 6
}
  9e:	08 95       	ret

000000a0 <_Z10AnalogReadh>:

uint16_t AnalogRead(uint8_t channel) {
    ADMUX |= channel;
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	98 2b       	or	r25, r24
  a4:	97 b9       	out	0x07, r25	; 7
    ADCSRA |= (1 << ADSC);
  a6:	36 9a       	sbi	0x06, 6	; 6
    while (!(ADCSRA & (1 << ADIF))) {
  a8:	34 9b       	sbis	0x06, 4	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <_Z10AnalogReadh+0x8>
        // Do nothing
    }
    ADCSRA |= (1 << ADIF); // Clear ADIF
  ac:	34 9a       	sbi	0x06, 4	; 6
    return (ADC);
  ae:	24 b1       	in	r18, 0x04	; 4
  b0:	35 b1       	in	r19, 0x05	; 5
}
  b2:	c9 01       	movw	r24, r18
  b4:	08 95       	ret

000000b6 <_Z9USARTInitb>:
 * ISR(USART_RXC_vect) {
 *     value = UDR; // Read UDR register   
 * }
 */
void USARTInit(bool startService = false) {
    UBRRH = (unsigned char) (BAUD_PRESCALE >> 8);
  b6:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) BAUD_PRESCALE;
  b8:	96 e0       	ldi	r25, 0x06	; 6
  ba:	99 b9       	out	0x09, r25	; 9
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
  bc:	87 95       	ror	r24
  be:	88 27       	eor	r24, r24
  c0:	87 95       	ror	r24
  c2:	88 61       	ori	r24, 0x18	; 24
  c4:	8a b9       	out	0x0a, r24	; 10
}
  c6:	08 95       	ret

000000c8 <_Z13USARTSendBytec>:

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <_Z13USARTSendBytec>
        // Do nothing
    }
    UDR = data;
  cc:	8c b9       	out	0x0c, r24	; 12
}
  ce:	08 95       	ret

000000d0 <_Z16USARTReceiveBytev>:

uint8_t USARTReceiveByte() {
    while ((UCSRA & (1 << RXC)) == 0) {
  d0:	5f 9b       	sbis	0x0b, 7	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <_Z16USARTReceiveBytev>
        // Do nothing
    }
    return UDR;
  d4:	8c b1       	in	r24, 0x0c	; 12
}
  d6:	08 95       	ret

000000d8 <_Z15USARTSendStringPc>:

void USARTSendString(char str[]) {
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	04 c0       	rjmp	.+8      	; 0xe4 <_Z15USARTSendStringPc+0xc>
    UBRRL = (unsigned char) BAUD_PRESCALE;
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
  dc:	5d 9b       	sbis	0x0b, 5	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <_Z15USARTSendStringPc+0x4>
        // Do nothing
    }
    UDR = data;
  e0:	ec b9       	out	0x0c, r30	; 12

void USARTSendString(char str[]) {
    uint8_t i = 0;
    while (str[i] != '\0') {
        USARTSendByte(str[i]);
        i++;
  e2:	2f 5f       	subi	r18, 0xFF	; 255
    return UDR;
}

void USARTSendString(char str[]) {
    uint8_t i = 0;
    while (str[i] != '\0') {
  e4:	fc 01       	movw	r30, r24
  e6:	e2 0f       	add	r30, r18
  e8:	f1 1d       	adc	r31, r1
  ea:	e0 81       	ld	r30, Z
  ec:	ee 23       	and	r30, r30
  ee:	b1 f7       	brne	.-20     	; 0xdc <_Z15USARTSendStringPc+0x4>
    UBRRL = (unsigned char) BAUD_PRESCALE;
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
  f0:	5d 9b       	sbis	0x0b, 5	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <_Z15USARTSendStringPc+0x18>
        // Do nothing
    }
    UDR = data;
  f4:	8a e0       	ldi	r24, 0x0A	; 10
  f6:	8c b9       	out	0x0c, r24	; 12
    UBRRL = (unsigned char) BAUD_PRESCALE;
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
  f8:	5d 9b       	sbis	0x0b, 5	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <_Z15USARTSendStringPc+0x20>
        // Do nothing
    }
    UDR = data;
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	8c b9       	out	0x0c, r24	; 12
        USARTSendByte(str[i]);
        i++;
    }
    USARTSendByte('\n');
    USARTSendByte('\r');
}
 100:	08 95       	ret

00000102 <_Z18runStartUpSequencev>:

volatile unsigned char usartValue;
volatile uint8_t adcHigh;
volatile uint8_t adcLow;

void runStartUpSequence() {
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
    for (int i = 0; i < 3; i++) {
        PORTB ^= (1 << PINB0);
 106:	61 e0       	ldi	r22, 0x01	; 1
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 108:	40 e9       	ldi	r20, 0x90	; 144
 10a:	51 e0       	ldi	r21, 0x01	; 1
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	86 27       	eor	r24, r22
 110:	88 bb       	out	0x18, r24	; 24
 112:	84 ef       	ldi	r24, 0xF4	; 244
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	fa 01       	movw	r30, r20
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <_Z18runStartUpSequencev+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11e:	d9 f7       	brne	.-10     	; 0x116 <_Z18runStartUpSequencev+0x14>
        _delay_ms(50);
        PORTB ^= (1 << PINB0);
 120:	88 b3       	in	r24, 0x18	; 24
 122:	86 27       	eor	r24, r22
 124:	88 bb       	out	0x18, r24	; 24
 126:	84 ef       	ldi	r24, 0xF4	; 244
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	fa 01       	movw	r30, r20
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <_Z18runStartUpSequencev+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 130:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	d9 f7       	brne	.-10     	; 0x12a <_Z18runStartUpSequencev+0x28>
volatile unsigned char usartValue;
volatile uint8_t adcHigh;
volatile uint8_t adcLow;

void runStartUpSequence() {
    for (int i = 0; i < 3; i++) {
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255
 138:	23 30       	cpi	r18, 0x03	; 3
 13a:	31 05       	cpc	r19, r1
 13c:	39 f7       	brne	.-50     	; 0x10c <_Z18runStartUpSequencev+0xa>
        PORTB ^= (1 << PINB0);
        _delay_ms(50);
        PORTB ^= (1 << PINB0);
        _delay_ms(50);
    }
}
 13e:	08 95       	ret

00000140 <main>:

int main(void) {
    DDRB |= (1 << PINB0) | (1 << PINB1);
 140:	87 b3       	in	r24, 0x17	; 23
 142:	83 60       	ori	r24, 0x03	; 3
 144:	87 bb       	out	0x17, r24	; 23
    PORTB |= (0 << PINB0) | (0 << PINB1);
 146:	88 b3       	in	r24, 0x18	; 24
 148:	88 bb       	out	0x18, r24	; 24
    runStartUpSequence();
 14a:	0e 94 81 00 	call	0x102	; 0x102 <_Z18runStartUpSequencev>
    sei();
 14e:	78 94       	sei
 * ISR(USART_RXC_vect) {
 *     value = UDR; // Read UDR register   
 * }
 */
void USARTInit(bool startService = false) {
    UBRRH = (unsigned char) (BAUD_PRESCALE >> 8);
 150:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) BAUD_PRESCALE;
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	89 b9       	out	0x09, r24	; 9
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
 156:	88 e9       	ldi	r24, 0x98	; 152
 158:	8a b9       	out	0x0a, r24	; 10
    USARTInit(true);
    while (1) {
        // Endless cycle of violence..
        cli();
 15a:	f8 94       	cli
        USARTSendByte(adcLow);
 15c:	80 91 62 00 	lds	r24, 0x0062
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <main+0x20>
        // Do nothing
    }
    UDR = data;
 164:	8c b9       	out	0x0c, r24	; 12
        USARTSendByte(adcHigh);
 166:	80 91 61 00 	lds	r24, 0x0061
    UBRRL = (unsigned char) BAUD_PRESCALE;
    UCSRB = (1 << TXEN) | (1 << RXEN) | ((int) startService << RXCIE);
}

void USARTSendByte(char data) {
    while ((UCSRA & (1 << UDRE)) == 0) {
 16a:	5d 9b       	sbis	0x0b, 5	; 11
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x2a>
        // Do nothing
    }
    UDR = data;
 16e:	8c b9       	out	0x0c, r24	; 12
        sei();
 170:	78 94       	sei
 172:	f3 cf       	rjmp	.-26     	; 0x15a <main+0x1a>

00000174 <__vector_11>:
    }
}

ISR(USART_RXC_vect) {
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
    usartValue = UDR;
 196:	8c b1       	in	r24, 0x0c	; 12
 198:	80 93 60 00 	sts	0x0060, r24
    switch (usartValue) {
 19c:	80 91 60 00 	lds	r24, 0x0060
 1a0:	82 35       	cpi	r24, 0x52	; 82
 1a2:	19 f0       	breq	.+6      	; 0x1aa <__vector_11+0x36>
 1a4:	83 35       	cpi	r24, 0x53	; 83
 1a6:	41 f4       	brne	.+16     	; 0x1b8 <__vector_11+0x44>
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <__vector_11+0x40>
    MCUCR |= 1 << SE; // Sleep-mode enabled
    ADCSRA |= (1 << ADSC);
}

void DisableADC() {
    ADCSRA = 0x00;
 1aa:	16 b8       	out	0x06, r1	; 6
        case 'R':
            DisableADC();
            ADCInit(0);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 43 00 	call	0x86	; 0x86 <_Z7ADCInith>
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <__vector_11+0x4c>
 1b4:	16 b8       	out	0x06, r1	; 6
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <__vector_11+0x4c>
            break;
        case 'S':
            DisableADC();
            break;
        default:
            PORTB ^= (1 << PINB0);
 1b8:	88 b3       	in	r24, 0x18	; 24
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	89 27       	eor	r24, r25
 1be:	88 bb       	out	0x18, r24	; 24
            break;
    }
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_14>:

ISR(ADC_vect) {
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
    adcHigh = ADCH;
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	80 93 61 00 	sts	0x0061, r24
    adcLow = ADCL;
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	80 93 62 00 	sts	0x0062, r24
    ADCSRA |= 1 << ADSC;
 1fa:	36 9a       	sbi	0x06, 6	; 6
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
